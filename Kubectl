


**** helm *****

-- Show Version
   helm version

-- Show Chart File
   helm show chart .

-- Repositories List 
   helm repo list

-- Add Repository
   helm repo add bitnami https://charts.bitnami.com/bitnami

-- Update latest from chart repositories
   helm repo update

-- Create Release / Install Chart

   --- Basic
        helm install my-release bitnami/drupal

   --- With Parameters 
       helm install my-release --set drupalUsername=kubeacademytest --set drupalPassword=Kubeacademy bitnami/drupal

   --- Select Version
       helm install myrabbitmq bitnami/rabbitmq --version 6.18.3

-- Upgrade Release
   helm upgrade myrabbitmq bitname/rabbitmq --version 6.18.3 --set replicas:3 --set rabbitmq.password=password --set rabbitmq.erlangCookie=rbpassword 

-- History Release
   helm history myrabbitmq
   
-- Rollback Release

   --- Rollback last release
       helm rollback myrabitmq

-- Unistall Release
   helm uninstall myrabbitmq

-- Delete Release
   helm delete my-release
  
-- Search Repo
   helm search repo bitnami -l

-- Template 

   --- Test Template
       helm template my-chart .

   --- Template Output
       helm template mychart . -s Mychartrelease.yaml

   --- Template Parameters
       helm template mychart . set jenkinsUsername="John User" -s Mychartrelease.yaml
  

**** Kind *****
kind create cluster

kind get clusters

kind delete cluster

*** Alias (Bash) ***

alias k=kubectl
complete -F __start_kubectl k

**********************************
*** Kubectl ***
*********************************

#Versão
kubectl version --client=true

#Informações do Cluster
kubectl cluster-info

# Documentação
  
  kubectl explain deployment

# View all the resources 

  - deployed to the cluster in the Default Namespace: 
    kubectl get all

  - View all the resources deployed to the cluster in all of the Namespaces: 
    kubectl get all --all-namespaces

  - View all the supported resource types
    kubectl api-resources

# Obter Nodes
  kubectl get nodes

#Expondo uma porta da maquina
kubectl expose deployment first-deployment --port=80 --type=NodePort

# The command below finds the allocated port and executes a HTTP request.

export PORT=$(kubectl get svc first-deployment -o go-template='{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{"\n"}}{{end}}{{end}}')
echo "Accessing host01:$PORT"
curl host01:$PORT
#Criar um pod pu demais objetos
kubectl apply -f [arquivo.yaml]

#Criar objetos de uma pasta
kubectl apply -f ../Pasta/


### PODS ###
    
    ## Get pods

      kubectl get all -A

      kubectl get pods

      kubectl get po -n 'namespace'

    # All pods and Pods System
      kubectl get pods -A

    # All pods sort by 'podId'
      kubectl get pod -o wide --sort-by=.status.podIP

    # Get by name
      kubectl get pods  frontend-deployment-7bb7f6687-n6qqs -n frontend
      
    # Show labels
      kubectl get pods -n frontend --show-labels
   
    # Get pods by selector
      - Uses selector
        kubectl get pods -n frontend --selector=app=web
      
      - Uses selector with condition   
        kubectl get nodes --selector='!node-role.kubernetes.io/master'

      - Uses label
        kubectl get pods -n frontend -l app=haproxy
      
     # Get Pods format view

       - Using "\n"
         kubectl get nodes -o=jsonpath='{.items[*].metadata.name}{"\n"}{.items[*].status.capacity.cpu}{"\n"}'

       - Use the range and end
         kubectl get nodes -o=jsonpath='{range  .items[*]}{.metadata.name}{"\t"}{.status.capacity.cpu}{"\n"}{end}'
       
       - Use Custom-Columns
         kubectl get nodes -o=custom-columns=NAME:.metadata.name,CPU:.status.capacity.cpu
   
         kubectl get pods  -o custom-columns=Pod_NAME:.metadata.name,IMAGE_VER:.spec.containers[*].image
     
     # Edit Label from Pod

       - Use Patch
         kubectl patch pod nginx -p '{"metadata":{"labels":{"env":"dev"}}}'
       
       - Use Label  
         kubectl label pod nginx env=prod --overwrite
    
         Suggestions Label
         env (prod,devel)
         app (ui,etc..)
         rel (stable, beta, canary)
  
       - Delete Label
         kubectl label pod nginx env-
 
  # Deletar pod
    kubectl delete pod [nome-pod]

    kubectl delete -f [arquivo.yaml]

    $ kubectl delete po -l rel=beta

  # Obter Informações sobre objetos 
    kubectl explain pods

  # Executar
    kubectl exec -ti myrabbitmq-0 -- rabbitmqctl --version 
    
    -- Listar Variaveis de Ambiente
       kubectl exec kubia-3inly env
 
  # Information about history about container (running, restarted)
    kubectl describe po kubia-liveness
 
    # Liveness
        Liveness: http-get http://:8080/ delay=0s timeout=1s period=10s #success=1 #failure=3
               ! liveness    -> probe simply checks if the container is responding.
               ! delay=0s    -> part shows that the probing begins immediately after the container is started.
               ! timeout=1s  -> is set to only 1 second, so the container must return a response in 1 second or the probe is counted as failed.
               ! period=10s  -> The container is probed every 10 seconds (period=10s).
               ! #failure=3  -> restarted after the probe fails three consecutive times.
     
    # Readyness
       Readiness: exec [ls /var/ready] delay=0s timeout=1s period=10s #success=1 #failure=3 
              !Readiness    -> probe simply check if the the container is ready to accept requests
     
  # Logs
    $ kubectl logs kubia-manual -c kubia
       -c <container name>
   
      kubectl logs mypod --previous
         ! previous -> When you want to figure out why the previous container terminated

#Deployment (Recommended)

   # Edit
   
     - Edit Deployment Definition
       kubectl edit [Nome Deployment]
 
     - Edit Image Deployment
       kubectl set image deployment/nginx-deployment nginx=nginx:1.17 --record
       
       ! --record flag to capture and record the history of the rollout: 
       !  commands is not best practice. 
          The best practice is to manually edit the deployment manifest file and update the spec.template.spec.containers[].image field, 
          save it, and run the kubectl apply -f DEPPLYOMET.YAML
 
   #Scale
   
    -  Edit scale the deployment up to 5 replicas by command
       kubectl scale deploy nginx-deployment --replicas=5

   # Describe Deployment
     kubectl describe deployment nginx-deployment -n default
     
   # Describe All Deployment 
     kubectl describe deployment -n kube-system -A
   
   # Get Definition
     kubectl get deploy  nginx-deployment -o json

   # Get Deployed Objects
     - All objects, without system objects
       kubectl get deployment 
     
     - All object and System Objects
       kubectl get deployment -A 
   
     - Get Definition the system Object
       kubectl get deployment  -n kube-system -o yaml  | grep coredns
   
     - Get Specific Deployment
       kubectl get deploy nginx-deployment
     
     - Get Deployment by name
       kubectl get deploy nginx-deployment
   
     - Get
       kubectl get deployment/nginx-deployment


   # Get Deployment Definition
     kubectl get deploy  nginx-deployment -o json

   # Rollback Deployment
   
    -- Execute rollout
     
       - Last change
         kubectl rollout undo deployment/[Deployment Name]

       - Specific Revision
         kubectl rollout undo deployment/nginx-deployment --to-revision=2
   
     - Show Actual Status of Rollout 
       kubectl rollout status -w deployment/nginx-deployment

     - Show all history of rollout
       kubectl rollout history deployment/nginx-deployment     

   # Create
   
     - Simple
       kubectl create deployment nginx-deployment --image=nginx:1.16
     
     - With Labes
       kubectl run nginx  --image=nginx --restart=Never --labels=env=prod

     - Dry-run - Validate Manifest File
       kubectl create deployment deploy-nginx --image=nginx --dry-run -o yaml >~/deploy-nginx.yaml

# View all the supported resource types (possible determine if a resource is namespaced)
  kubectl api-resources


### ConfigMap 

  ## Overview
     ConfigMaps bind configuration files, command-line arguments, environment variables, port numbers, and other configuration artifacts to your Pods' 
     containers and system components at runtime.
 
  ## Create from command 
     kubectl create configmap fortune-config --from-literal=sleep-interval=25

  ## CREATING A CONFIGMAP ENTRY FROM THE CONTENTS OF A FILE
     kubectl create configmap my-config --from-file=config-file.conf
     
  ## COMBINING DIFFERENT OPTIONS   
     kubectl create configmap my-config
           --from-file=foo.json
           --from-file=bar=foobar.conf         " File Json 'Key, Value'"  
           --from-file=config-opts/            "A whole directory"
           --from-literal=some=thing           "Literal"
     
### Namespaces

     # Get all object determine namespaces
        kubectl get all -n 'namespaceName'
 
     # Delete ns and every one of those objects
       kubectl delete ns 'name' 

     ## Create namespace

        - Create Namespace
          kubectl create namespace frontend

        - Create Namespace Preview and Save in a file
          kubectl create namespace backend -o yaml --dry-run >~/ns-backend.yaml

           ? dry-run flag allows you to preview the object without creating it, 
             and makes no changes to the cluster. 
             It's a great way to validate without making changes
        
       ## Create resources inside a namespace

           kubectl run redis --image=redis -n backend --restart=Never
              
                ! The --restart=Never flag tells the kubectl run command to create a single pod.
       
           kubectl run nginx --generator=run-pod/v1 --image=nginx --namespace frontend

                ! --generator flag tells the kubectl run command to pin the resource to a specific apiVersion specification. 
                    In this case apiVersion:v1 and kind:pod. This flag is NOT widely used and may get depracated in future version releases

         ## Get all namespaces

            kubectl all-namespaces | grep 'texto'

        ## Get objects inside a namespace
           kubectl get pods --namespace frontend
           
        ## Switch beetween namespaces
           kubectl config set-context --current --namespace=frontend

        ## Kubens

           # Overview
             switch between namespaces
           
           # List all namespaces
             kubens

           # switch namespace
             kubens frontend
           
  ## Context

    #Overview  
      A context is just a set of access parameters. Each context contains a Kubernetes cluster, a user, and a namespace
         
    # View all contexts of the current cluster 
      kubectl config get-contexts

    # review the current kubectl configuration (KubeConfig) the current cluster. 
      -view kubeconfig
      kubectl config view
      
      -access file
        cd $HOME/.kube
        cat config

    # list of all our configured clusters we have access to:
      kubectl config get-clusters

    # Create new Context
      kubectl config set-context dev-context --cluster kubernetes --user=kubernetes-admin

    # To switch to another context
      kubectl config use-context dev-context



   ## ReplicationController (Not Recommended)
  
     # Overview
       ReplicationController is a Kubernetes resource that ensures its pods are always kept running
       
       - A label selector, which determines what pods are in the ReplicationController’s scope 
       - A replica count, which specifies the desired number of pods that should be running
       - A pod template, which is used when creating new pod replicas (Metadata e spec defination)
       
    #  Get ReplicationControllers
       kubectl get rc  
     
     # Scale
       kubectl scale rc kubia --replicas=3

    # Kubectx

      - To switch to another context
         kubectx dev-context
  
      - List all Context
         kubectx
